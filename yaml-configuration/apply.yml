# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml



pool:
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'tfstate'
  bkstr: 'tfstatestrg0'
  bkcontainer: 'tfstatecontainer'
  bkstrkey: 'terraform.tfstate'
  system.debug: true

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false 
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
#  - stage: tfsec
#    jobs:
#      - job: tfsec
#        continueOnError: true
#        steps: 
#          - task: tfsec@1
#            displayName: tfsec
#            inputs:
#              version: 'v1.26.0'
#              dir: './'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'TFAzureSC'
                backendAzureRmResourceGroupName: 'tfstate'
                backendAzureRmStorageAccountName: 'tfstatestrg0'
                backendAzureRmContainerName: 'tfstatecontainer'
                backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV3@3
            displayName: validate
            inputs:
                provider: 'azurerm'
                command: 'validate'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'custom'
              customCommand: 'fmt'
              outputTo: 'console'
              environmentServiceNameAzureRM: 'TFAzureSC'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'TFAzureSC'
              backendAzureRmResourceGroupName: 'tfstate'
              backendAzureRmStorageAccountName: 'tfstatestrg0'
              backendAzureRmContainerName: 'tfstatecontainer'
              backendAzureRmKey: 'terraform.tfstate'
#          - task: TerraformTaskV3@3
#            displayName: plan
#            inputs:
#              provider: 'azurerm'
#              command: 'plan'
#              environmentServiceNameAzureRM: 'TFAzureSC'
          - task: DownloadPipelineArtifact@2
            displayName: Dowload tfplan
            inputs:
              buildType: 'specific'
              project: '4633739b-9e8c-472a-802f-b774a2f87a15'
              definition: '8'
              specificBuildWithTriggering: true
              buildVersionToDownload: 'latest'
              allowPartiallySucceededBuilds: true
              allowFailedBuilds: true
              artifactName: 'tfplan'
              targetPath: '$(Build.SourcesDirectory)'
          - task: DownloadPipelineArtifact@2
            displayName: Download tflintoutput
            inputs:
              buildType: 'specific'
              project: '4633739b-9e8c-472a-802f-b774a2f87a15'
              definition: '8'
              specificBuildWithTriggering: true
              buildVersionToDownload: 'latest'
              allowPartiallySucceededBuilds: true
              allowFailedBuilds: true
              artifactName: 'tflintoutput'
              targetPath: '$(Build.SourcesDirectory)'
          - task: TerraformTaskV3@3
            displayName: apply 
            inputs:
               provider: 'azurerm'
               command: 'apply'
               commandOptions: 'tfplan'
               environmentServiceNameAzureRM: 'TFAzureSC'
            

 



